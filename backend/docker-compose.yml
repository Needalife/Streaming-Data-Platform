services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-backend
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-backend
    restart: on-failure
    depends_on:
      - zookeeper
    volumes:
      - ./kafka/server.properties:/etc/kafka/server.properties
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_ADVERTISED_HOSTNAME}:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - backend

  redis-master:
    image: redis:latest
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    restart: always
    volumes:
      - ./redis/config/redis-master.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_MASTER_PORT}:${REDIS_MASTER_PORT}"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - backend

  redis-replica:
    image: redis:latest
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf", "--replicaof", "redis-master", "${REDIS_MASTER_PORT}" ]
    restart: always
    volumes:
      - ./redis/config/redis-replica.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_REPLICA_PORT}:${REDIS_MASTER_PORT}"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - backend

  redis-sentinel:
    image: redis:latest
    command: [ "redis-sentinel", "/usr/local/etc/redis/redis.conf", "--sentinel" ]
    volumes:
      - ./redis/config/sentinel.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_SENTINEL_PORT}:${REDIS_SENTINEL_PORT}"
    depends_on:
      - redis-master
      - redis-replica
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - backend

  event-processor:
    build:
      context: ./event-processor
      dockerfile: Dockerfile
    container_name: event-processor
    restart: on-failure
    depends_on:
      - kafka
    env_file:
      - path: ./event-processor/.env
        required: true
    networks:
      - backend

  gateway:
    build:
      context: ./gateway
      dockerfile: deploy/Dockerfile
    container_name: gateway
    depends_on:
      - redis-sentinel
    restart: on-failure
    env_file:
      - path: ./gateway/.env
        required: true
    ports:
      - "${GATEWAY_EXTERNAL_PORT}:${GATEWAY_INTERNAL_PORT}"
    networks:
      - backend

  static-data:
    build:
      context: ./static-data
      dockerfile: Dockerfile
    container_name: static-data
    restart: on-failure
    depends_on:
      - kafka
    env_file:
      - path: ./static-data/.env
        required: true
    networks:
      - backend
    ports:
      - "${STATIC_EXTERNAL_PORT}:${STATIC_INTERNAL_PORT}"

  static-data-lifecycle:
    build:
      context: ./static-data-lifecycle
      dockerfile: Dockerfile
    container_name: static-data-lifecycle
    restart: on-failure
    env_file:
      - path: ./static-data-lifecycle/.env
        required: true
    networks:
      - backend

  live-data:
    build:
      context: ./live-data
      dockerfile: deploy/Dockerfile
    container_name: live-data
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./live-data/.env
    networks:
      - backend
    ports:
      - "${LIVE_EXTERNAL_PORT}:${LIVE_INTERNAL_PORT}"

volumes:
  redis-master-data:


networks:
  backend:
    external: false
    driver: bridge
