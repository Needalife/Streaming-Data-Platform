services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-backend
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-backend
    restart: on-failure
    depends_on:
      - zookeeper
    volumes:
      - ./kafka/server.properties:/etc/kafka/server.properties
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_ADVERTISED_HOSTNAME}:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - backend

  redis-master:
    image: redis:6.2
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "someStrongPassword" ]
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "someStrongPassword", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis-slave-1:
    image: redis:6.2
    command: [ "redis-server", "--appendonly", "yes", "--slaveof", "redis-master", "6379", "--masterauth", "someStrongPassword" ]
    depends_on:
      - redis-master
    ports:
      - "6380:6379"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "someStrongPassword", "-h", "redis-master", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis-sentinel-1:
    build:
      context: ./gateway/redis
      dockerfile: Dockerfile.sentinel
    ports:
      - "26379:26379"
    depends_on:
      - redis-master
      - redis-slave-1
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "26379", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  event-processor:
    build:
      context: ./event-processor
      dockerfile: Dockerfile
    container_name: event-processor
    restart: on-failure
    depends_on:
      - kafka
    env_file:
      - path: ./event-processor/.env
        required: true
    networks:
      - backend

  gateway:
    build:
      context: ./gateway
      dockerfile: deploy/Dockerfile
    container_name: gateway
    restart: on-failure
    env_file:
      - path: ./gateway/.env
        required: true
    ports:
      - "${GATEWAY_EXTERNAL_PORT}:${GATEWAY_INTERNAL_PORT}"
    networks:
      - backend

  static-data:
    build:
      context: ./static-data
      dockerfile: Dockerfile
    container_name: static-data
    restart: on-failure
    depends_on:
      - kafka
    env_file:
      - path: ./static-data/.env
        required: true
    networks:
      - backend
    ports:
      - "${STATIC_EXTERNAL_PORT}:${STATIC_INTERNAL_PORT}"

  static-data-lifecycle:
    build:
      context: ./static-data-lifecycle
      dockerfile: Dockerfile
    container_name: static-data-lifecycle
    restart: on-failure
    env_file:
      - path: ./static-data-lifecycle/.env
        required: true
    networks:
      - backend

  live-data:
    build:
      context: ./live-data
      dockerfile: Dockerfile
    container_name: live-data
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./live-data/.env
    networks:
      - backend
    ports:
      - "${LIVE_EXTERNAL_PORT}:${LIVE_INTERNAL_PORT}"

volumes:
  redis-master-data:


networks:
  backend:
    external: false
    driver: bridge
